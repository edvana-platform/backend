generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  phone     String?    @unique
  dob       DateTime
  gender    Gender
  address   String?
  role      Role
  status    UserStatus @default(ACTIVE)
  password  String
  schoolId  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  teacherProfile Teacher?
  studentProfile Student?
  parentProfile  Parent?
  school         School?  @relation(fields: [schoolId], references: [id])

  subscriptions   Subscription[]
  subjects        Subject[]        @relation("UserSubjects")
  quizzes         Quiz[]
  submissions     Submission[]
  courseMaterials CourseMaterial[]
  scheduleEvents  ScheduleEvent[]
}

model Teacher {
  userId         String     @id
  user           User       @relation(fields: [userId], references: [id])
  specialization String[]
  qualification  String
  experience     Int
  subjects       String[]
  classes        Class[]
  customRoles    String[]
  status         UserStatus @default(ACTIVE)
}

model Student {
  userId         String     @id
  user           User       @relation(fields: [userId], references: [id])
  classId        String
  class          Class      @relation(fields: [classId], references: [id])
  enrollmentDate DateTime
  status         UserStatus @default(ACTIVE)

  // Relations
  parents ParentStudent[]
}

model Parent {
  userId     String     @id
  user       User       @relation(fields: [userId], references: [id])
  nationalId String     @unique
  status     UserStatus @default(ACTIVE)

  // Relations
  children ParentStudent[]
}

model ParentStudent {
  id        String @id @default(uuid())
  parentId  String
  studentId String

  // Optional: Add relationship metadata
  relationship       String? // e.g., "father", "mother", "guardian"
  isEmergencyContact Boolean  @default(false)
  createdAt          DateTime @default(now())

  parent  Parent  @relation(fields: [parentId], references: [userId], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@unique([parentId, studentId])
  @@index([parentId])
  @@index([studentId])
}

enum Role {
  STUDENT
  TEACHER
  PARENT
  SCHOOL_ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model Subject {
  id            String  @id @default(uuid())
  name          String
  code          String?
  gradeId       String
  description   String?
  durationWeeks Int?
  userId        String?
  teacher       User?   @relation("UserSubjects", fields: [userId], references: [id], onDelete: SetNull)

  topics          Topic[]
  courseMaterials CourseMaterial[]
  schedules       ScheduleEvent[]
  Grade           Grade            @relation(fields: [gradeId], references: [id])
}

model Topic {
  id              String           @id @default(uuid())
  name            String
  subjectId       String
  subject         Subject          @relation(fields: [subjectId], references: [id])
  courseMaterials CourseMaterial[]
}

model School {
  id        String   @id @default(uuid())
  name      String   @unique
  email     String   @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriptions Subscription[]
  users         User[]
}

model Subscription {
  id        String   @id @default(uuid())
  type      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  schoolId  String?
  studentId String?
  school    School?  @relation(fields: [schoolId], references: [id])
  student   User?    @relation(fields: [studentId], references: [id])

  @@index([schoolId])
  @@index([studentId])
}

model Quiz {
  quizId           String       @id @default(uuid())
  quizName         String       @unique
  quizType         QuizType
  class            Class        @relation(fields: [classId], references: [id])
  description      String
  quizInstructions String
  status           Status       @default(DRAFT)
  startTime        DateTime
  endTime          DateTime
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())
  teacherId        String
  questions        Question[]
  teacher          User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  submissions      Submission[]
  classId          String

  @@index([teacherId])
}

model Question {
  questionId             String       @id @default(uuid())
  questionBody           String
  questionType           QuestionType @default(OPEN_ENDED)
  optionA                String?
  optionB                String?
  optionC                String?
  optionD                String?
  optionE                String?
  optionF                String?
  open_ended_answer      String?
  multiple_choice_answer MCQ?
  true_false_answer      Boolean?
  maximumPoints          Int
  quizQuizId             String?
  answers                Answer[]
  quiz                   Quiz?        @relation(fields: [quizQuizId], references: [quizId], onDelete: Cascade)

  @@index([quizQuizId])
}

model Answer {
  answerId               String        @id @default(uuid())
  answerType             QuestionType
  open_answer            String?
  chosen_option          MCQ?
  boolean_answer         Boolean?
  accumulatedMarks       Int           @default(0)
  markingStatus          MarkingStatus @default(PENDING)
  questionId             String
  submissionSubmissionId String?
  fileName               String?
  submittedFile          File?         @relation(fields: [fileName], references: [name])
  question               Question      @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  submission             Submission?   @relation(fields: [submissionSubmissionId], references: [submissionId], onDelete: Cascade)

  @@index([questionId])
  @@index([submissionSubmissionId])
  @@index([fileName])
}

model Submission {
  submissionId      String        @id @default(uuid())
  submissionStatus  MarkingStatus @default(PENDING)
  accumulatedMarks  Int
  createdAt         DateTime      @default(now())
  quizQuizId        String
  submittedByUserId String
  answers           Answer[]
  quiz              Quiz          @relation(fields: [quizQuizId], references: [quizId], onDelete: Cascade)
  submittedBy       User          @relation(fields: [submittedByUserId], references: [id], onDelete: Cascade)

  @@index([quizQuizId])
  @@index([submittedByUserId])
}

model File {
  name      String   @id
  size      BigInt
  type      String
  extension String
  Answer    Answer[]
}

model CourseMaterial {
  id           String   @id @default(uuid())
  title        String
  description  String?
  fileUrl      String
  uploadedById String?
  createdAt    DateTime @default(now())
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id]) // Made optional

  // Reference to Topic
  topicId String?
  topic   Topic?  @relation(fields: [topicId], references: [id])

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@index([subjectId])
  @@index([topicId])
}

enum Status {
  PUBLISHED
  DRAFT
}

enum MarkingStatus {
  MARKED
  PENDING
}

enum QuestionType {
  MCQ
  TRUE_FALSE
  OPEN_ENDED
}

enum QuizType {
  OPEN
  CLOSED
}

enum MCQ {
  A
  B
  C
  D
  E
  F
}

enum ScheduleAudience {
  PUBLIC // visible to anyone (schoolâ€‘wide)
  STUDENTS // visible to all students
  TEACHERS // visible to all teachers
  CLASS_ONLY // visible only to the specified class (targetClass)
  PRIVATE // visible only to the creator
}

model ScheduleEvent {
  id          String           @id @default(uuid())
  title       String // e.g., "Mathematics"
  description String?
  location    String? // e.g., "A101"
  audience    ScheduleAudience @default(PUBLIC)

  // time window
  startsAt DateTime
  endsAt   DateTime

  // who created it
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // optional links to help your UI
  subjectId String?
  subject   Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)

  // optional display helpers (match the screenshot text)
  teacherName String?
  subjectName String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startsAt])
  @@index([createdById])
  @@index([subjectId])
}

model Level {
  id     String  @id @default(uuid())
  name   String
  grades Grade[]
}

model Grade {
  id        String     @id @default(uuid())
  name      String
  level     Level      @relation(fields: [levelId], references: [id])
  levelId   String
  subgrades Subgrade[]
  subjects  Subject[]
  classes   Class[]
}

model Subgrade {
  id      String  @id @default(uuid())
  name    String
  grade   Grade   @relation(fields: [gradeId], references: [id])
  gradeId String
  classes Class[]
}

model Class {
  id            String    @id @default(uuid())
  grade         Grade     @relation(fields: [gradeId], references: [id])
  gradeId       String
  subgrade      Subgrade? @relation(fields: [subgradeId], references: [id])
  subgradeId    String?
  name          String
  Teacher       Teacher?  @relation(fields: [teacherUserId], references: [userId])
  teacherUserId String?

  // Relations
  students Student[] // Add this relation
  quizzes  Quiz[]
}
